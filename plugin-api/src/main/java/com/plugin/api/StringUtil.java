package com.plugin.api;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.lang.Character.UnicodeBlock;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import net.sf.json.JSONFunction;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

public class StringUtil {

    private static Logger log = Logger.getLogger(StringUtil.class);

    private static String strChineseFirstPY = "";
 
	public static String getHtml(String title,String bodyHtml,String charset,String enter) {
		StringBuffer sb = new StringBuffer();
		sb.append("<html>" + enter);
		sb.append("<head>" + enter);
		sb.append("<meta charset=\"" + charset + "\"/>" + enter);
		sb.append("<meta http-equiv=\"content-type\" content=\"text/html; charset=" + charset + "\"/>" + enter);
		sb.append("<title>" + title + "</title>" + enter);
		
		sb.append("</head>" + enter);
		sb.append("<body>" + enter);
		
		sb.append(bodyHtml + enter);
		
		sb.append("</body>" + enter);
		sb.append("</html>");
		
		return sb.toString();
	}
    
	public static String getSpace(int n) {//加空格
		StringBuffer sb = new StringBuffer("");
		if(n > 0) {
			n = n * 4;
			for (int j = 0; j < n; j++) {
				sb.append(" ");
			}
		}
	    return sb.toString();
	}
	
	public static String retracSpace(String s,int n) {
		StringBuffer sb = new StringBuffer("");
		if(n > 0) {
			n = n * 4;
			for (int j = 0; j < n; j++) {
				sb.append(" ");
			}
		}
	    return sb.toString();
	}
	
    public static void test(String[] args) {
    	String str = "中国";
		str = "sz";
		System.out.println(isChinese(str));
    	
    	/*
        String[] strArr = new String[] { "www.micmiu.com", "!@#$%^&*()_+{}[]|\"'?/:;<>,.", "！￥……（）——：；“”‘’《》，。？、", "不要啊", "やめて", "韩佳人", "???" };
        for (String str : strArr) {
            System.out.println("===========> 测试字符串：" + str);
            System.out.println("正则判断结果：" + isChineseByREG(str) + " -- " + isChineseByName(str));
            System.out.println("Unicode判断结果 ：" + isChinese(str));
            System.out.println("详细判断列表：");
            char[] ch = str.toCharArray();
            for (int i = 0; i < ch.length; i++) {
                char c = ch[i];
                System.out.println(c + " --> " + (isChinese(c) ? "是" : "否"));
            }
        }
        */
    }
    
    /**
     * 获取字符串长度.
     */
    public static int getStringLength(String v, int lengthType) {
        Integer tmp = null;
        if (lengthType == 1) {
            tmp = new Integer(v.length());
        } else if (lengthType == 2) {
            int m = 0;
            char[] ch = v.toCharArray();
            if (ch != null && ch.length > 0) {
                for (int i = 0; i < ch.length; i++) {
                    char c = ch[i];
                    String s = String.valueOf(c);
                    if (s.matches("^[\u0391-\uFFE5]+$")) {
                        m++;
                    }
                }
            }
            tmp = new Integer(v.length() + m);
        } else if (lengthType == 3) {
            int x = 0;
            int z = 0;
            int y = 0;
            char[] ch = v.toCharArray();
            if (ch != null && ch.length > 0) {
                
                for (int i = 0; i < ch.length; i++) {
                    String s = String.valueOf(ch[i]);
                    y = s.getBytes().length;
                    if (y == 1) {
                        z = z + 1;
                    } else {
                        x = x + 1;
                    }
                }
            }
            return x + (z % 2 == 0 ? (z / 2)
                : (z / 2 + 1));
        }
        
        return tmp.intValue();
    }
    
    
    /**
     * 断言两对象值是否相等
     */
    public static boolean assertEquals(Object o1,Object o2){
        
        //System.out.println(o1.getClass().getName());
        //System.out.println(o2.getClass().getName());
        boolean b = false;
        if(o1 == null || o2 == null){
            return b;
        }
        if (o1 instanceof String && o2 instanceof String){
            String s1 = (String)o1;
            String s2 = (String)o2;
            if(s1 != null && s2 != null){
                b = s1.equals(s2);
            }
        }else if (o1 instanceof Short && o2 instanceof Short){
            Short s1 = (Short)o1;
            Short s2 = (Short)o2;
            if(s1 != null && s2 != null){
                b = s1.shortValue() == s2.shortValue();
            }
        }else if (o1 instanceof Integer && o2 instanceof Integer){
            Integer s1 = (Integer)o1;
            Integer s2 = (Integer)o2;
            if(s1 != null && s2 != null){
                b = s1.intValue() == s2.intValue();
            }
        }else if (o1 instanceof Long && o2 instanceof Long){
            Long s1 = (Long)o1;
            Long s2 = (Long)o2;
            if(s1 != null && s2 != null){
                b = s1.longValue() == s2.longValue();
            }
        }else if ((o1 instanceof Double && o2 instanceof Double)||(o1 instanceof Float && o2 instanceof Float)){
            Double s1 = (Double)o1;
            Double s2 = (Double)o2;
            
            if(s1 != null && s2 != null){
                String tmp1 = String.valueOf(s1);
                String tmp2 = String.valueOf(s2);
                
                String[] tmp11 = tmp1.split("\\.");
                String[] tmp22 = tmp2.split("\\.");
                
                if(tmp11.length == tmp22.length){
                    if(tmp11.length == 1){
                        b = tmp11[0].equals(tmp22[0]);
                    }else{
                        b = tmp11[0].equals(tmp22[0]);
                        if(b){
                            b = tmp11[1].equals(tmp22[1]);
                        }
                    }
                }else{
                    if(tmp11.length == 1 && tmp22.length ==2){
                        b = tmp11[0].equals(tmp22[0]);
                        if(b){
                            b = "".equals(tmp22[1]);
                        }
                    }else if(tmp11.length == 2 && tmp22.length ==1){
                        b = tmp11[0].equals(tmp22[0]);
                        if(b){
                            b = tmp11[1].equals("");
                        }
                    }
                }
            }
            
        }else if (o1 instanceof Boolean && o2 instanceof Boolean){
            Boolean s1 = (Boolean)o1;
            Boolean s2 = (Boolean)o2;
            if(s1 != null && s2 != null){
                b = s1.booleanValue() == s2.booleanValue();
            }
        }else if (o1 instanceof JSONFunction){
            JSONFunction s1 = (JSONFunction)o1;
            JSONFunction s2 = (JSONFunction)o2;
            
            if(s1 != null && s2 != null){
                b = s1.toString().equals(s2.toString());
            }
        }else if (o1 instanceof List && o2 instanceof List){    
            List s1 = (List)o1;
            List s2 = (List)o2;
            
            if(s1 != null && s2 != null){
                if(s1.size() == s2.size()){
                    for (int i = 0; i < s1.size(); i++) {
                        b = assertEquals(s1.get(i),s2.get(i));
                        if(!b){
                            break;
                        }
                    }
                }
            }
            
        }else if (o1 instanceof Object[] && o2 instanceof Object[]){    
            Object[] s1 = (Object[])o1;
            Object[] s2 = (Object[])o2;
            
            if(s1 != null && s2 != null){
                if(s1.length == s2.length){
                    for (int i = 0; i < s1.length; i++) {
                        b = assertEquals(s1[i],s2[i]);
                        if(!b){
                            break;
                        }
                    }
                }
            }
        }else if (o1 instanceof Date && o2 instanceof Date){
            Date s1 = (Date)o1;
            Date s2 = (Date)o2;
            
            if(s1 != null && s2 != null){
                long t1 = s1.getTime();
                long t2  = s2.getTime();
                
                b = t1 == t2;
            }
            
        }else if (o1 instanceof Calendar && o2 instanceof Calendar){
            Calendar s1 = (Calendar)o1;
            Calendar s2 = (Calendar)o2;
            
            if(s1 != null && s2 != null){
                long t1 = s1.getTime().getTime();
                long t2 = s2.getTime().getTime();
                
                b = t1 == t2;
            }
        }
        
        System.out.println(b);
        
        return b;
    }
    
    
    /**  
     * 将一字符串转换成拼音首字母  
     * @param strText  字符串  
     * @return 字符串对应的拼音首字母  
     */
    public static String getFirstPY(String strText) {
        if (strText == null || strText.trim().length() == 0)
            return "";
        String ret = "";
        for (int i = 0; i < strText.length(); i++) {
            char ch = strText.charAt(i);
            if ('\u4E00' <= ch && '\u9FA5' >= ch)
                ret = ret + strChineseFirstPY.charAt(ch - 19968);
            else
                ret = ret + ch;
        }

        return ret;
    }

    /**
     * 提取字符串中的中文
     */
    public static String pickupChineseString(String str) {
        int count = 0;
        String regEx = "[\\u4e00-\\u9fa5]";
        Pattern p = Pattern.compile(regEx);
        Matcher m = p.matcher(str);
        String s = "";
        while (m.find()) {
            s += m.group(0);
        }
        return s;
    }
    
    /**
	 * 字符串中提取出数字.
	 * @param text   "abc12.56%jlskdf4a"
	 * 12.56%,4
	 */
	public static List<String> getDigit(String text){
		List<String> digitList = new ArrayList<String>();
		String regex = "[\\-0-9\\.%]+";//"\\d*"
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(text);
		while (m.find()) {
			digitList.add(m.group());
		}
		return digitList;
	}
	
	 /**
	 * 字符串中提取出数字.
	 * @param text   "abc12.56%jlskdf4a"
	 * 12.56%,4
	 */
	public static List<String> getDigitToList(String text){
		List<String> digitList = new ArrayList<String>();
		String regex = "[\\-0-9\\.%]+";//"\\d*"
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(text);
		while (m.find()) {
			digitList.add(m.group());
		}
		return digitList;
	}

	/**
	 * 判断String是否是整数.
	 */
	public static boolean isInteger(String s) {
		return VerifyUtil.verifyParam(s, VerifyUtil.integer);
	}
	
	/**
	 * 判断String是否是数字.
	 */
	public static boolean isNumber(String s) {
		return VerifyUtil.verifyParam(s, VerifyUtil.number);
	}

	/**
	 * 判断字符串是否是浮点.
	 */
	public static boolean isDouble(String value) {
		return VerifyUtil.verifyParam(value, VerifyUtil.doubleOrFloat);
	}

	/**
	 * 判断字符串是否是数字【浮点、数字】.
	 */
	public static boolean isDigit(String value) {
		return isNumber(value) || isDouble(value);
	}
	
	 /**
	 * 字符串中提取出数字.
	 * @param text   "abc12.56%jlskdf4a"
	 * 12.56%,4
	 */
	public static String getDigitToString(String text){
		StringBuffer sb = new StringBuffer();
		String regex = "[\\-0-9\\.%]+";//"\\d*"
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(text);
		while (m.find()) {
			sb.append(m.group());
		}
		return sb.toString();
	}

    public static void main(String[] args) {
        String msIsdn = "MsgLen=159,MsgType=5,ModuleNO=1,EntityId=3,UserId=aaa,Password=bbb,BizList=2";
        String msIsdntemp = byte2hexString(msIsdn.getBytes());
        System.out.println(msIsdntemp);
        System.out.println(toStringHex(msIsdntemp, 15));
    }

    /**
     * 字符串与十六进制的互转
     */
    public static String byte2hexString(byte[] bytes) {
        if (bytes == null) {
            return null;
        }
        StringBuffer buf = new StringBuffer(bytes.length * 2);
        for (int i = 0; i < bytes.length; i++) {
            if (((int) bytes[i] & 0xff) < 0x10) {
                buf.append("0");
            }
            buf.append(Long.toString((int) bytes[i] & 0xff, 16));
        }
        return buf.toString();
    }

    /**
     * 字符串与十六进制的互转
     */
    public static String toStringHex(String s, int codeType) {
        if (s == null || s.equals(""))
            return "";
        String codeStr = getCodeType(codeType);
        if (codeStr.equals("")) {
            return s;
        }
        byte[] baKeyword = new byte[s.length() / 2];
        for (int i = 0; i < baKeyword.length; i++) {
            try {
                baKeyword[i] = (byte) (0xff & Integer.parseInt(s.substring(
                        i * 2, i * 2 + 2), 16));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        try {
            s = new String(baKeyword, codeStr);// UTF-16le:Not
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        return s;
    }

    public static String getCodeType(int codeType) {
        String codeStr = "";
        switch (codeType) {
        case 0: // ASCII
            codeStr = "US-ASCII";
            break;
        case 4:
            codeStr = "";
            break;
        case 8:
            codeStr = "ISO-10646-UCS-2";
            break;
        case 15:
            codeStr = "GBK";
            break;
        }
        return codeStr;
    }

    /**  
     * 替换字符串  
     * @param strSc  需要进行替换的字符串  
     * @param oldStr 源字符串  
     * @param newStr 替换后的字符串  
     * @return 替换后对应的字符串  
     */
    public static String replace(String strSc, String oldStr, String newStr) {
        String ret = strSc;
        if (ret != null && oldStr != null && newStr != null) {
            ret = strSc.replaceAll(oldStr, newStr);
        }
        
        return ret;
    }

    /**
     * 替换字符串，修复java.lang.String类的replaceAll方法时第一参数是字符串常量正则时(如："address". 
     * replaceAll("dd","$");)的抛出异常：java.lang.StringIndexOutOfBoundsException: 
     * String index out of range: 1的问题。
     * @param strSc  需要进行替换的字符串 
     * @param oldStr 源字符串
     * @param newStr 替换后的字符串
     * @return 替换后对应的字符串
     */
    public static String replaceAll(String strSc, String oldStr, String newStr) {
        int i = -1;
        while ((i = strSc.indexOf(oldStr)) != -1) {
            strSc = new StringBuffer(strSc.substring(0, i)).append(newStr)
                    .append(strSc.substring(i + oldStr.length())).toString();
        }
        return strSc;
    }

    /**
     * 将字符串转换成HTML格式的字符串
     * @param str  需要进行转换的字符串 
     * @return 转换后的字符串
     */
    public static String toHtml(String str) {
        String html = str;
        if (str == null || str.length() == 0) {
            return "";
        } else {
            html = replace(html, "&", "&");
            html = replace(html, "<", "<");
            html = replace(html, ">", ">");
            html = replace(html, "\r\n", "\n");
            html = replace(html, "\n", "<br>\n");
            html = replace(html, "\"", "\"");
            html = replace(html, " ", " ");
            return html;
        }
    }

    /**  
     * 将HTML格式的字符串转换成常规显示的字符串   
     * @param str  需要进行转换的字符串  
     * @return 转换后的字符串  
     */
    public static String toText(String str) {
        String text = str;
        if (str == null || str.length() == 0) {
            return "";
        } else {
            text = replace(text, "&", "&");
            text = replace(text, "<", "<");
            text = replace(text, ">", ">");
            text = replace(text, "<br>\n", "\n");
            text = replace(text, "<br>", "\n");
            text = replace(text, "\"", "\"");
            text = replace(text, " ", " ");
            return text;
        }
    }

    /**  
     * 将一字符串数组以某特定的字符串作为分隔来变成字符串  
     * @param strs   字符串数组  
     * @param token  分隔字符串  
     * @return 以token为分隔的字符串  
     */
    public static String join(String[] strs, String token) {
        if (strs == null)
            return null;
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < strs.length; i++) {
            if (i != 0)
                sb.append(token);
            sb.append(strs[i]);
        }
        return sb.toString();
    }

    /**  
     * 验证字符串合法性  
     * @param str   需要验证的字符串  
     * @param test  非法字符串（如："~!#$%^&*()',;:?"）  
     * @return true:非法;false:合法  
     */
    public static boolean check(String str, String test) {
        if (str == null || str.equals(""))
            return true;
        boolean flag = false;
        for (int i = 0; i < test.length(); i++) {
            if (str.indexOf(test.charAt(i)) != -1) {
                flag = true;
                break;
            }
        }
        return flag;
    }

    /**  
     * 将数值型字符串转换成Integer型  
     * @param str   需要转换的字符型字符串  
     * @param ret   转换失败时返回的值  
     * @return 成功则返回转换后的Integer型值；失败则返回ret  
     */
    public static Integer string2Integer(String str, Integer ret) {
        try {
            return new Integer(str);
        } catch (NumberFormatException e) {
            return ret;
        }
    }

    /**  
     * 将数值型字符串转换成Integer型  
     * @param str   需要转换的字符型字符串  
     * @param ret   转换失败时返回的值  
     * @return 成功则返回转换后的Integer型值；失败则返回ret  
     */
    public static Integer string2Integer(String str, int ret) {
        try {
            return new Integer(str);
        } catch (NumberFormatException e) {
            return new Integer(ret);
        }
    }

    /**  
     * 将数值型转换成字符串  
     * @param it   需要转换的Integer型值  
     * @param ret  转换失败的返回值  
     * @return 成功则返回转换后的字符串；失败则返回ret  
     */
    public static String integer2String(int it, String ret) {
        try {
            return Integer.toString(it);
        } catch (NumberFormatException e) {
            return ret;
        }
    }

    /**  
     * 将数值型转换成字符串  
     * @param it   需要转换的Integer型值  
     * @param ret  转换失败的返回值  
     * @return 成功则返回转换后的字符串；失败则返回ret  
     */
    public static String integer2String(Integer it, String ret) {
        try {
            return Integer.toString(it.intValue());
        } catch (NumberFormatException e) {
            return ret;
        }
    }

    /**  
     * 比较两字符串大小(ASCII码顺序)  
     * @param str1  参与比较的字符串1  
     * @param str2  参与比较的字符串2  
     * @return str1>str2:1;str1<str2:-1;str1=str2:0  
     */
    public static int compare(String str1, String str2) {//   
        if (str1.equals(str2)) {
            return 0;
        }
        int str1Length = str1.length();
        int str2Length = str2.length();
        int length = 0;
        if (str1Length > str2Length) {
            length = str2Length;
        } else {
            length = str1Length;
        }
        for (int i = 0; i < length; i++) {
            if (str1.charAt(i) > str2.charAt(i)) {
                return 1;
            }
        }
        return -1;
    }

    /**  
     * 将阿拉伯数字的钱数转换成中文方式  
     * @param num   需要转换的钱的阿拉伯数字形式  
     * @return 转换后的中文形式  
     */
    public static String num2Chinese(double num) {
        String result = "";
        String str = Double.toString(num);
        if (str.contains(".")) {
            String begin = str.substring(0, str.indexOf("."));
            String end = str.substring(str.indexOf(".") + 1, str.length());
            byte[] b = begin.getBytes();
            int j = b.length;
            for (int i = 0, k = j; i < j; i++, k--) {
                result += getConvert(begin.charAt(i));
                if (!"零".equals(result.charAt(result.length() - 1) + "")) {
                    result += getWei(k);
                }
                //System.out.println(result);
            }
            for (int i = 0; i < result.length(); i++) {
                result = result.replaceAll("零零", "零");
            }
            if ("零".equals(result.charAt(result.length() - 1) + "")) {
                result = result.substring(0, result.length() - 1);
            }
            result += "元";
            byte[] bb = end.getBytes();
            int jj = bb.length;
            for (int i = 0, k = jj; i < jj; i++, k--) {
                result += getConvert(end.charAt(i));
                if (bb.length == 1) {
                    result += "角";
                } else if (bb.length == 2) {
                    result += getFloat(k);
                }
            }
        } else {
            byte[] b = str.getBytes();
            int j = b.length;
            for (int i = 0, k = j; i < j; i++, k--) {
                result += getConvert(str.charAt(i));
                result += getWei(k);
            }
        }
        return result;
    }

    public static String getConvert(char num) {
        if (num == '0') {
            return "零";
        } else if (num == '1') {
            return "一";
        } else if (num == '2') {
            return "二";
        } else if (num == '3') {
            return "三";
        } else if (num == '4') {
            return "四";
        } else if (num == '5') {
            return "五";
        } else if (num == '6') {
            return "六";
        } else if (num == '7') {
            return "七";
        } else if (num == '8') {
            return "八";
        } else if (num == '9') {
            return "九";
        } else {
            return "";
        }
    }
    
    public static String getConvert(int num) {
    	if (num == 0) {
            return "零";
        } else if (num == 1) {
            return "一";
        } else if (num == 2) {
            return "二";
        } else if (num == 3) {
            return "三";
        } else if (num == 4) {
            return "四";
        } else if (num == 5) {
            return "五";
        } else if (num == 6) {
            return "六";
        } else if (num == 7) {
            return "七";
        } else if (num == 8) {
            return "八";
        } else if (num == 9) {
            return "九";
        } else {
            return "";
        }
    }

    private static String getFloat(int num) {
        if (num == 2) {
            return "角";
        } else if (num == 1) {
            return "分";
        } else {
            return "";
        }
    }

    private static String getWei(int num) {
        if (num == 1) {
            return "";
        } else if (num == 2) {
            return "十";
        } else if (num == 3) {
            return "百";
        } else if (num == 4) {
            return "千";
        } else if (num == 5) {
            return "万";
        } else if (num == 6) {
            return "十";
        } else if (num == 7) {
            return "百";
        } else if (num == 8) {
            return "千";
        } else if (num == 9) {
            return "亿";
        } else if (num == 10) {
            return "十";
        } else if (num == 11) {
            return "百";
        } else if (num == 12) {
            return "千";
        } else if (num == 13) {
            return "兆";
        } else {
            return "";
        }
    }

    /**
     * 首字母变成大写
     * @return
     */
    public static String firstToUpper(String fieldName) {
        String s = "";
        if (fieldName != null && fieldName.length() >= 1) {
            String tmp1 = fieldName.substring(0, 1);
            String tmp2 = fieldName.substring(1);
            s = tmp1.toUpperCase() + tmp2;
        }

        return s;
    }

    /**
     * 首字母变成小写
     * @return
     */
    public static String firstToLower(String fieldName) {
        String s = "";
        if (fieldName != null && fieldName.length() >= 1) {
            String tmp1 = fieldName.substring(0, 1);
            String tmp2 = fieldName.substring(1);
            s = tmp1.toLowerCase() + tmp2;
        }

        return s;
    }
    
    /**
     * get 2 set
     */
    public static String get2Set(String getMethed) {
        String s = "";
        if (getMethed != null && getMethed.length() >= 1) {
            String tmp1 = "s";
            String tmp2 = getMethed.substring(1);
            s = tmp1 + tmp2;
        }

        return s;
    }
    /**
     * set 2 get
     */
    public static String set2Get(String setMethed) {
        String s = "";
        if (setMethed != null && setMethed.length() >= 1) {
            String tmp1 = "g";
            String tmp2 = setMethed.substring(1);
            s = tmp1 + tmp2;
        }

        return s;
    }
    
    /**
     * 将TestBo转 TEST_BO
     * 将thsZjm 转 THS_ZJM
     */
    public static String toTableField(String attr) {
        StringBuffer cv = new StringBuffer();
        if (attr != null && attr.length() >= 1) {
        	char[] array = attr.toCharArray();
            for (int i = 0; i < array.length; i++) {
				char v = array[i];
				int n = (int)array[i];
				
				//System.out.println(v + " - " + n);
				
				if(97<=n && n<=122){//小写字母a-z 对应数字97-122
					cv.append(String.valueOf(v).toUpperCase());//小写转大写
					
				}else if(65<=n && n<=90){//大写字母A-Z对应数字65-90
					if(i == 0){//如果首字母是大写
						cv.append(v);
					}else{
						cv.append("_" + v);
					}
				}
			}
        }
        return cv.toString();
    }

    public static String omitStr(String s, int n) {
        if (StringUtils.isBlank(s)) {
            return "";
        }
        if (s.length() <= n) {
            return s;
        } else {
            return s.substring(0, n) + "...";
        }
    }

    /**
     * 判断字符串中含有某字符的个数
     */
    public static Integer findCharNumber(char c, String s) {
        int n = 0;
        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if (c == chars[i]) {
                n++;
            }
        }
        return new Integer(n);
    }

    /**
     * 替换m后的字符
     */
    public static String replaceChar(int m, char c, String s) {
        int n = 0;
        int len = 0;
        String result = "";
        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if (c == chars[i]) {
                n++;
                if (n == m) {
                    len = i;
                    break;
                }
            }
        }
        String temp1 = s.substring(0, len + 1);
        String temp2 = s.substring(len + 1, s.length());
        return (temp1 + temp2.replace(c, ' ')).trim();
    }
    
    public static List<Double> string2Double(List<String> list){
    	List<Double> d = new ArrayList<Double>();
		if(list != null && list.size() > 0){
			for (int i = 0; i < list.size(); i++) {
				String val = list.get(i);
				if(StringUtil.isNotEmpty(val) && StringUtil.isNumeric1(val)){
					if(val.indexOf("%") != -1){
						val = val.substring(0,val.length()-1);
					}
					d.add(Double.valueOf(val));
				}else{
					d.add(0.0);
				}
			}
		}
		return d;
    }
    public static List<Long> string2Long(List<String> list){
    	List<Long> d = new ArrayList<Long>();
		if(list != null && list.size() > 0){
			for (int i = 0; i < list.size(); i++) {
				String val = list.get(i);
				if(StringUtil.isNotEmpty(val) && StringUtil.isNumeric1(val)){
					if(val.indexOf(".") != -1){
						String[] vs = val.split("\\.");
						int n = vs[1].length();
						long v = Long.valueOf(vs[0])*Long.valueOf(NumberUtil.getNumber(n))+Long.valueOf(vs[1]);
						System.out.println(v + " - " +vs[0] + " - " + vs[1]);
						d.add(v);
					}else{
						d.add(Long.valueOf(val));
					}
				}else{
					d.add(0L);
				}
			}
		}
		return d;
    }
    public static List<Integer> string2Integer(List<String> list){
    	List<Integer> d = new ArrayList<Integer>();
		if(list != null && list.size() > 0){
			for (int i = 0; i < list.size(); i++) {
				String val = list.get(i);
				if(StringUtil.isNotEmpty(val) && StringUtil.isNumeric1(val)){
					d.add(Integer.valueOf(list.get(i)));
				}else{
					d.add(0);
				}
			}
		}
		return d;
    }
    
    /**
     * 用JAVA自带的函数 判断字符串是否为数字
     */
    public static boolean isNumeric1(String str) {
    	if(str == null || "".equals(str) || "--".equals(str) || "--".equals(str)){
    		return false;
    	}
    	if(str.length() == 1 && (str.startsWith("-") || str.startsWith("-"))){
    		return false;
    	}
    	return str.matches("[\\-0-9\\.%]+");
    }

    /**
     * 用正则表达式 判断字符串是否为数字
     */
    public static boolean isNumeric2(String str) {
    	if(str != null && !"".equals(str)){
            Pattern pattern = Pattern.compile("[0-9]*");
            return pattern.matcher(str).matches();
    	}
        return false;
    }

    /**
     * 用ascii码 判断字符串是否为数字
     */
    public static boolean isNumeric3(String str) {
        for (int i = str.length(); --i >= 0;) {
            int chr = str.charAt(i);
            if (chr < 48 || chr > 57)
                return false;
        }
        return true;
    }

    /**
     * 将汉字转化成Unicode编码
     */
    public static String toUNICODE(String s) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) <= 256) {
                sb.append("\\u00");
            } else {
                sb.append("\\u");
            }
            sb.append(Integer.toHexString(s.charAt(i)));
        }
        return sb.toString();
    }
    
    public String gbk2utf8(String gbk) {
        String l_temp = gbk2Unicode(gbk);
        l_temp = unicodeToUtf8(l_temp);
 
        return l_temp;
    }
 
    public String utf82gbk(String utf) {
        String l_temp = utf8ToUnicode(utf);
        l_temp = unicode2GBK(l_temp);
 
        return l_temp;
    }
    
    /**
     * utf-8 转unicode
     */
    public static String utf8ToUnicode(String inStr) {
        char[] myBuffer = inStr.toCharArray();
 
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < inStr.length(); i++) {
            UnicodeBlock ub = UnicodeBlock.of(myBuffer[i]);
            if (ub == UnicodeBlock.BASIC_LATIN) {
                sb.append(myBuffer[i]);
            } else if (ub == UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {
                int j = (int) myBuffer[i] - 65248;
                sb.append((char) j);
            } else {
                short s = (short) myBuffer[i];
                String hexS = Integer.toHexString(s);
                String unicode = "\\u" + hexS;
                sb.append(unicode.toLowerCase());
            }
        }
        return sb.toString();
    }
    
    public static String unicodeToUtf8(String theString) {
        char aChar;
        int len = theString.length();
        StringBuffer outBuffer = new StringBuffer(len);
        for (int x = 0; x < len;) {
            aChar = theString.charAt(x++);
            if (aChar == '\\') {
                aChar = theString.charAt(x++);
                if (aChar == 'u') {
                    // Read the xxxx
                    int value = 0;
                    for (int i = 0; i < 4; i++) {
                        aChar = theString.charAt(x++);
                        switch (aChar) {
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                            value = (value << 4) + aChar - '0';
                            break;
                        case 'a':
                        case 'b':
                        case 'c':
                        case 'd':
                        case 'e':
                        case 'f':
                            value = (value << 4) + 10 + aChar - 'a';
                            break;
                        case 'A':
                        case 'B':
                        case 'C':
                        case 'D':
                        case 'E':
                        case 'F':
                            value = (value << 4) + 10 + aChar - 'A';
                            break;
                        default:
                            throw new IllegalArgumentException(
                                    "Malformed   \\uxxxx   encoding.");
                        }
                    }
                    outBuffer.append((char) value);
                } else {
                    if (aChar == 't')
                        aChar = '\t';
                    else if (aChar == 'r')
                        aChar = '\r';
                    else if (aChar == 'n')
                        aChar = '\n';
                    else if (aChar == 'f')
                        aChar = '\f';
                    outBuffer.append(aChar);
                }
            } else
                outBuffer.append(aChar);
        }
        return outBuffer.toString();
    }
    
    public static String gbk2Unicode(String str) {
        StringBuffer result = new StringBuffer();
        for (int i = 0; i < str.length(); i++) {
            char chr1 = (char) str.charAt(i);
 
            if (!isNeedConvert(chr1)) {
                result.append(chr1);
                continue;
            }
 
            result.append("\\u" + Integer.toHexString((int) chr1));
        }
 
        return result.toString();
    }
    
    public static boolean isNeedConvert(char para) {
        return ((para & (0x00FF)) != para);
    }
    
	public static String unicode2GBK(String dataStr) {
        int index = 0;
        StringBuffer buffer = new StringBuffer();
 
        int li_len = dataStr.length();
        while (index < li_len) {
            if (index >= li_len - 1
                    || !"\\u".equals(dataStr.substring(index, index + 2))) {
                buffer.append(dataStr.charAt(index));
 
                index++;
                continue;
            }
 
            String charStr = "";
            charStr = dataStr.substring(index + 2, index + 6);
 
            char letter = (char) Integer.parseInt(charStr, 16);
 
            buffer.append(letter);
            index += 6;
        }
 
        return buffer.toString();
    }

    /**
     * 将流转成字符串
     */
    public static String inputStreamToString(InputStream in) {
        StringBuffer out = new StringBuffer("");
        byte b[] = new byte[4096];
        int n;
        try {
            while ((n = in.read(b)) != -1) {
                out.append(new String(b, 0, n));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return out.toString();
    }

    /**
     * 将字符串转成流
     */
    public static InputStream stringToInputStream(String str) {
        ByteArrayInputStream stream = new ByteArrayInputStream(str.getBytes());
        return stream;
    }

    /**
     * 拆分字符串
     */
    public static String[] split(String strings, String delims) {
        if (strings == null) {
            return new String[0];
        }
        StringTokenizer tokens = new StringTokenizer(strings, delims);
        String result[] = new String[tokens.countTokens()];
        int i = 0;
        while (tokens.hasMoreTokens()) {
            result[i++] = tokens.nextToken();
        }
        return result;
    }

    /**
     * java去除字符串中的空格、回车、换行符、制表符
     *row = row.replaceAll("\\s{1,}", " ");//将一个字符串中的多个连一起的空格变成单个空格
     */
    public static String replaceBlank(String str) {
        Pattern p = Pattern.compile("\\s*|\t|\r|\n");
        Matcher m = p.matcher(str);
        String s = m.replaceAll("");

        return s;
    }
    /**
     * 替换字符串的空格.
     * @param type 1去除字符串所有空格,2字符以相同长度的空格分隔
     */
    public static String replaceBlank(String str,String type) {
    	 String s = "";
    	if(type == null || "".equals(type) || "1".equals(type)){
    		Pattern p = Pattern.compile("\\s*|\t|\r|\n");
            Matcher m = p.matcher(str);
            s = m.replaceAll("");
    	}else if("2".equals(type)){
    		s = str.replaceAll("\\s{1,}", " ");
    	}
        return s;
    }
    
    /**
     * 判断是否含有空格.
     * @param true含有
     */
    public static Boolean isIncludeBlank(String s) {
    	if(StringUtil.isNotEmpty(s)){
    		return s.contains(" ");
    		/**
    		 * int i = s.replace(" ","");
               if(i > 0){
                  System.out.println("有空格");
                  return true;
               }
    		 */
    	}
    	return null;
    }
    
    /**
     * 判断操作系统类型
     */
    public static String osType() {
        String tmp = System.getProperty("os.name");
        String string = "";
        if (tmp.indexOf("Linux") != -1 || tmp.indexOf("linux") != -1) {
            string = "linux";
        } else if (tmp.indexOf("Windows") != -1 || tmp.indexOf("windows") != -1) {
            string = "windows";
        }
        return string;
    }

    public static String getEnter() {
        String c = osType();
        if ("windows".equals(c)) {
            return "\r\n";
        }
        return "\n";
    }

    /**
     * 把字符串转换成Unicode码
     * @param strText 待转换的字符串
     * @param code 转换前字符串的编码，如"GBK"
     * @return 转换后的Unicode码字符串
     */
    public String toUnicode(String strText, String code)
            throws UnsupportedEncodingException {
        char c;
        String strRet = "";
        int intAsc;
        String strHex;
        strText = new String(strText.getBytes("8859_1"), code);
        for (int i = 0; i < strText.length(); i++) {
            c = strText.charAt(i);
            intAsc = (int) c;
            if (intAsc > 128) {
                strHex = Integer.toHexString(intAsc);
                strRet = strRet + "&#x" + strHex + ";";
            } else {
                strRet = strRet + c;
            }
        }
        return strRet;
    }
    
    public static String convertFromGBKToISO8859(String s) {
    	String su = "";
    	try {
			su = new String(s.getBytes(),"ISO-8859-1");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return su;
		
	}
    
    public static String convertFromISO8859ToGBK(String s) {
    	String su = "";
    	try {
			su = new String(s.getBytes(),"GBK");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return su;
		
	}
    
    public static String convertFromUTF8ToISO8859(String s) {
    	String su = "";
    	try {
			su = new String(s.getBytes(),"ISO-8859-1");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return su;
		
	}
    
	public static void printByEncode(String msg) throws UnsupportedEncodingException {
		System.out.println("I-G" + new String(msg.getBytes("ISO-8859-1"), "GBK"));
		System.out.println("I-U8" + new String(msg.getBytes("ISO-8859-1"), "UTF-8"));
		System.out.println("I-U" + new String(msg.getBytes("ISO-8859-1"), "Unicode"));
		System.out.println("U8-G" + new String(msg.getBytes("UTF-8"), "GBK"));
		System.out.println("U8-I" + new String(msg.getBytes("UTF-8"), "ISO-8859-1"));
		System.out.println("U8-U" + new String(msg.getBytes("UTF-8"), "Unicode"));
		System.out.println("G-U8" + new String(msg.getBytes("GBK"), "UTF-8"));
		System.out.println("G-I" + new String(msg.getBytes("GBK"), "ISO-8859-1"));
		System.out.println("G-U" + new String(msg.getBytes("GBK"), "Unicode"));
		System.out.println("U-U8" + new String(msg.getBytes("Unicode"), "UTF-8"));
		System.out.println("U-I" + new String(msg.getBytes("Unicode"), "ISO-8859-1"));
		System.out.println("U-G" + new String(msg.getBytes("Unicode"), "GBK"));
		System.out.println("U-GB2312" + new String(msg.getBytes("Unicode"), "GB2312"));
	}
	
	/**
	 * 将文本行逐行添加到list中.
	 */
	public static List<String> string2List(String msg){
		List<String> list = new ArrayList<String>();
		String str = null;
		BufferedReader buff = null;
		try {
			buff = new BufferedReader(new StringReader(msg));
			while ((str = buff.readLine()) != null) {
				list.add(str);
			}
		} catch (Exception e) {
			log.error("",e);
		}finally{
			if (buff != null) {
				try {
					buff.close();
				} catch (IOException e) {
					log.error("", e);
				}
			}
		}
		return list;
	}
	
	/**
	 * 将文本行逐行添加到list中.
	 */
	public static List<String>  string2List(String msg,String separate){
		List<String>  list = new ArrayList<String>();
		if(isNotEmpty(msg) && isNotEmpty(separate)){
			if(msg.indexOf(separate) != -1){
				String[] array = msg.split(separate);
				if(array != null){
					for (int i = 0; i < array.length; i++) {
						list.add(array[i]);
					}
				}
			}else{
				list.add(msg);
			}
		}
		return list;
	}
	
	/**
	 * 根据指定的separate分隔符，将array数组接结成字符串.
	 * @param array 字符串数组
	 * @param separate 分隔符
	 */
	public static String array2String(String[] array,String separate) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < array.length; i++) {
			sb.append(array[i] + separate);
		}
		String s = sb.toString();
		if(s.endsWith(separate)){
			s = s.substring(0, s.length()- separate.length());
		}
		return s;
	}
	public static String array2String(Object[] array,String separate) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < array.length; i++) {
			if(i == array.length-1){//如果是最后一个
				sb.append(array[i]);
				break;
			}
			sb.append(array[i] + separate);
		}
		String s = sb.toString();
		if(s.endsWith(separate)){
			s = s.substring(0, s.length()- separate.length());
		}
		return s;
	}
	public static String list2String(List list,String separate) {
		return array2String(list.toArray(),separate);
	}
	
	/**
	 * 去除字符串数组中空字符串.
	 */
	public static String[] getNotNullElement(String[] ss){
		List<String> sqlList = new ArrayList<String>();
		for (int j = 0; j < ss.length; j++) {
			if(StringUtil.isNotEmpty(ss[j])){
				sqlList.add(ss[j]);
			}
		}
		
		Object[] os = sqlList.toArray();
		String[] rs = new String[os.length];
		for (int i = 0; i < os.length; i++) {
			rs[i] = (String)os[i];
		}
		
		return rs;
	}
	
	/**
	 * 如果为空(null或"")则返回true,否则alse.
	 */
	public static boolean isEmpty(String v) {
		if(v == null || "".equals(v.trim()) || "null".equals(v.toLowerCase())){
			return true;
		}
		return false;
	}
	public static boolean isEmpty(Object o) {
		if(o == null){
			return true;
		}
		if(o instanceof String){
			return isEmpty((String)o);
		}
		
		return false;
	}
	
	/**
	 * 如果为空(null或"")则返回false,否则true.
	 */
	public static boolean isNotEmpty(String v) {
		return (!isEmpty(v));
	}
	public static boolean isNotEmpty(Object o) {
		return (!isEmpty(o));
	}
	
	/**
	 * 如果为空(null)则返回true,否则alse.
	 */
	public static boolean isNull(String v) {
		if(v== null){
			return true;
		}
		return false;
	}
	public static boolean isNull(Object v) {
		if(v== null){
			return true;
		}
		return false;
	}
	
	
	/**
	 * 如果为null返回"".
	 */
	public static String returnEmpty(String v) {
		return v==null?"":("null".equals(v.trim().toLowerCase())?"":v.trim());
	}
	public static String returnEmpty(String v,String defaultValue) {
		return v==null?defaultValue:("null".equals(v.trim().toLowerCase())?defaultValue:v.trim());
	}
	
	/**
	 * 去除字符串未尾prefix.
	 */
	public static String removeEndsWith(String v,String prefix) {
		if(StringUtil.isNotEmpty(v)){
			v = v.trim();
			if(v.endsWith(prefix)){
				v = v.substring(0,v.length()-prefix.length());
			}
		}
		return v;
	}
	/**
	 * 去除字符串前面prefix.
	 */
	public static String removeStartsWith(String v,String prefix) {
		if(StringUtil.isNotEmpty(v)){
			v = v.trim();
			if(v.startsWith(prefix)){
				v = v.substring(prefix.length(),v.length());
			}
		}
		return v;
	}
	
	/**
	 * 去重方法.
	 */
	public static String delRepetString(String str){
	   StringBuffer result = new StringBuffer();
	   String[] ss = str.split(",");
	   for(int i=0;i<ss.length; i++){
	      if(result.indexOf(ss[i]) == -1 ){
	    	  result.append(ss[i] + ",");
	      }  
	   }
	   
	   String temp = result.toString();
	   if(temp.endsWith(",")){
		   temp = temp.substring(0,temp.length()-1);
	   }
	   
	   return temp;
	}
	
	//--------------------------------------------

    // 根据Unicode编码完美的判断中文汉字和符号
    private static boolean isChinese(char c) {
        Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);
        if (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS
                || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B
                || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS
                || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION) {
            return true;
        }
        return false;
    }
 
    // 完整的判断中文汉字和符号
    public static boolean isChinese(String strName) {
        char[] ch = strName.toCharArray();
        for (int i = 0; i < ch.length; i++) {
            char c = ch[i];
            if (isChinese(c)) {
                return true;
            }
        }
        return false;
    }
 
    // 只能判断部分CJK字符（CJK统一汉字）
    public static boolean isChineseByREG(String str) {
        if (str == null) {
            return false;
        }
        Pattern pattern = Pattern.compile("[\\u4E00-\\u9FBF]+");
        return pattern.matcher(str.trim()).find();
    }
 
    // 只能判断部分CJK字符（CJK统一汉字）
    public static boolean isChineseByName(String str) {
        if (str == null) {
            return false;
        }
        // 大小写不同：\\p 表示包含，\\P 表示不包含
        // \\p{Cn} 的意思为 Unicode 中未被定义字符的编码，\\P{Cn} 就表示 Unicode中已经被定义字符的编码
        String reg = "\\p{InCJK Unified Ideographs}&&\\P{Cn}";
        Pattern pattern = Pattern.compile(reg);
        return pattern.matcher(str.trim()).find();
    }
    
    //"\"\",\"\",\"\""
    public static String addBlank(String text,int n){
    	if(text == null){
    		text = "";
    	}
    	text = text.trim();
 		for (int i = 0; i < n; i++) {
 			text = text + ",\"" + "\"";
 		}
 		if(text.startsWith(",")){
 			text = text.substring(1,text.length());
 		}
 		return text;
 	}
}
